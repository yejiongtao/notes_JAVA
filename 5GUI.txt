1.JAVA事件模型
包括三个元素：
    事件对象：事件发生时由源对象产生
    源对象：事件发生时通知事件监听列表中的对象们
    事件监听对象：必须在源对象那里注册
基于委托的模型 delegation-based model
    指源对象把事件委托给监听器来处理。
流程：
    事件类：EventObject的子类
    事件监听器接口：EventListener的子接口。
    事件对：事件类和监听接口成对存在，比如ActionEvent和ActionListener，ItemEvent和ItemListener
    监听器组件：实现了监听接口的就是监听器组件。一个监听器组件可以实现任意多个监听接口
    源组件：源组件可以注册多个监听器组件，也可以把自己注册为监听器
自定义事件类和相应的监听器组件：
    满足事件发生的条件时，创建一个事件对象，在监听器列表中找到监听器对象，调用其中的某个方法，把事件交给他。

2.GUI基础
Swing与AWT：
    AWT(Abstract Window Toolkit)，早期写GUI的包
        AWT与OS提供的图形函数有一一对应的关系，基于本地的C/C++方法，称为重量型控件。为了可移植性，提供的是各种OS图形功能的交集。
        速度较快，适合于某些特别追求效率的嵌入式开发。
    Swing是对AWT的改良。
        用纯粹的Java代码实现的，平台无关，不使用本地方法，成为轻量型控件。
JavaBeans:
    是Java的一种软件控件架构。所有的Swing控件都是JavaBean。
    JavaBeans的属性都是用get...()来获得，用set...()来修改。这在Swing控件中经常体现。

3.容器：
    只有将组件放到容器当中才能显示。
    所有容器的基类是Container

Swing组件按功能可分为如下几类:
　　1、顶层容器:JFrame, JApplet, JDialog和JWindow（用得少）。
        （这几个直接继承了AWT组件，重量型容器，为其他的Swing组件提供了绘制自身的场所）
        （除了这几个其他所有都是JComponent的子类）
        （Swing顶层容器使用分层的窗格来组织轻型组件，从下到上分别是JRootPane, JLayeredPane, 自己加的组件, JGlassPane。那三个都有的Pane是不能直接使用的。）
　　2、中间容器:JPanel, JScrollPane, JSplitPane, JTooIBar等。
　　3、特殊容器:在用户界面上具有特殊作用的中间容器，如JlnternalFrame、JRootPane、JLayeredPane和JDestopPane等。
　　4、基本组件:实现人机交互的组件，如Button、 JComboBox、Just, Menu、Mider等。
　　5、不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel、JProgressBar和JTooITip等。
　　6、可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如JTable、JTextArea和JTextField等。
　　7、特殊对话框组件:可以直接产生特殊对话框的组件，如JColorChoosor和JFileChooser等。

JFrame是带有标题栏和边框的独立窗口，其中的常用属性：
    contentPane
    iconImage，图标，类型是Image，可以用ImageIcon的getImage()方法获得
    jMenuBar，可选菜单栏
    resizable，默认是true
    title
JApplet是嵌在网页中的小Java程序，其中定义有四个基本的方法：
    init()      //装入applet时，浏览器调用applet的无参构造函数，之后调用init()
    start()
    stop()
    destroy()
JPanel
    并不是顶层容器，所以需要放在顶层容器中。
    轻型容器，支持双缓存技术，可以消除闪烁，所以一般应该在JPanel上绘制，而不是直接在顶层容器上绘制。


4.布局管理器
    每个容器都有一个默认的布局管理器，如JFrame和JApplet是BorderLayout，JPanel是FlowLayout
    布局管理器需要根据组件的一些共同的性质决定布局：
        preferredSize, minimumSize, maximumSize, alignmentX, alignmentY
        alignmentX值由0-1，0表示紧贴坐标原点，0.5表示居中
    add(Component c, String name)可以在添加的时候给组件一个标识。
    注意：修改layout之后要调用容器的doLayout()或者revalidate()方法强迫容器重新放置组件。
    注意：是往容器中add组件，不是往layout中加。（Qt中layout就是容器了）
    layout相当于容器的一个属性罢了，用setLayout设置
FlowLayout
    从左到右放，放满了接着下一行。
BorderLayout
    东西南北中
GridLayout
    成行成列的单元格
CardLayout 
    把组件叠起来，每次只显示一个组件。
    next(),first(),last(),show()方法改变当前显示的组件。
BoxLayout
    把组件排成一行或者排成一列。
        JPanel p1 = new JPanel();
        BoxLayout boxLayout = new BoxLayout(p1, BoxLayout.X_AXIS);
        p1.setLayout(boxLayout);
    Box 是有类似功能的一个容器：（注意是容器，不是layout，直接在上面add组件）
        Box verticalBox = Box.createVerticalBox();
        verticalBox.add(..);
null布局管理器
    需要以绝对坐标来确定组件的位置时，使用null布局管理器
        container.setLayout(null);
        container.add(btn1);
        container.add(btn2);
        btn1.setBounds(10,10,40,20);
        btn2.setBounds(x, y, width, height);
    注意这样出来的应用在不同设备上移植性差。
自定义布局管理器
    实现LayoutManager接口

5.一些常用面板
JScrollPane
    可以用于滚动JComponent的任何子类
    一个JScrollPane容器实际上包括了中间的JViewPort，右边和下面的滚动条，上面和左边的headerView，还有四个角的corner
        jsp.setColumnHeaderView(new JLabel(...));   //JLabel用来表示图片或文字
        jsp.setCorner(JScrollPane.UPPER_LEFT_CORNER, new CornerPanel(JScrollPane.UPPER_LEFT_CORNER));
                                                    //CornerPanel用来显示一条线段。。
JTabbedPane 选项卡
    默认情况下选项卡位于顶部，可以用tabPlacement属性更改。
    一些方法：getTitleAt(),setTitleAt(),getIconAt(),setTitleAt(),indexOfTab(String title)
JSplitPane
    包含两个水平或垂直的组件，中间用一个divider隔开。重要的是，这个divider的位置是可以直接用鼠标拉动的。
    JSplitPane jSplitPane2 = new JSplitPane(
				JSplitPane.VERTICAL_SPLIT, jpComponents,
				new JScrollPane(jtaDesciption));
Swing边框
    AbstractBorder是一个基类，下面的子类有：
        BevelBorder 可凹可凸的三维边框（LOWERED或者RAISED）
        SoftBevelBorder 光滑的BevelBorder
        EmptyBorder 有边框空间但是没有线
        EtchedBorder 蚀刻边框，也可以是LOWERED或者RAISED
        LineBorder 任意宽度的单色边框线
        MatteBorder 虚线
        CompoundBorder 指定两个Border对象组合（注意是对象）
        TitledBorder 在指定位置显示字符串
    为了方便，一般用BorderFactory创建边框对象：
        Border border = BorderFactory.createEtchedBorder();
        p1.setBorder(border);
        p2.setBorder(border);   //注意！！！边框和图标是可以共享的！几个面板可以共享一个边框对象！

6.常用组件
JRadioButton 单选按钮
    JRadioButton jrb1 = new JRadioButton("1");
    JRadioButton jrb2 = new JRadioButton("2");
    ButtonGroup btg = new ButtonGroup();        //一定要有一个ButtonGroup才行。ButtonGroup只是逻辑上把几个单选按钮合在一起
                                                //物理上放的时候还是直接把一个个Button放进去容器中
    btg.add(jrb1);
    btg.add(jrb2);
菜单
    与之相关的类：
        JMenuBar 菜单栏
        JMenu 菜单
        JMenuItem,JCheckBoxMenuItem,JRadioButtonMenuItem 菜单项
    步骤
        1.创建菜单栏并加到JFrame或者JApplet中：
            JMenuBar jmb = new JMenuBar();
            frame.setJMenuBar(jmb);
        2.创建菜单并加到菜单栏中：
            JMenu fileMenu = new JMenu("File");
            JMenu helpMenu = new JMenu("Help");
            jmb.add(fileMenu);
            jmb.add(helpMenu);
        3.创建菜单项并添加到菜单中：
            fileMenu.add(new JMenuItem("New"));
            fileMenu.addSeparator();                //分隔线
            fileMenu.add(new JMenuItem("Exit"));
        子菜单：
            JMenu subMenu = new JMenu("New");
            fileMenu.add(subMenu);
            subMenu.add(new JMenuItem("Project"));
        复选框菜单项：
            helpMenu.add(new JCheckBoxMenuItem("Check it"));
        单选框菜单项：
            JRadioButtonMenuItem jrbMenu1 = new JRadioButtonMenuItem("1");
            JRadioButtonMenuItem jrbMenu2 = new JRadioButtonMenuItem("2");
            subMenu.add(jrbMenu1);
            subMenu.add(jrbMenu2);
            ButtonGroup btg = new ButtonGroup();    //也是要ButtonGroup！
            btg.add(jrbMenu1);
            btg.add(jrbMenu2);
        4.监听事件
            每个菜单项产生ActionEvent，所以按理说fileMenu.add(new JMenuItem("New"));这种写法是不科学的，因为必须记录每个菜单项的名字。
    图标、热键、快捷键
        菜单和菜单项都有图标属性icon和热键属性mnemonic
            jmiNew.setIcon(new ImageIcon("image/new.gif"));
            jmiNew.setMnemonic('N');
            按下alt和热键可以选择。
        快捷键：
            jmiOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK));
            设置ctrl+o为快捷键
    弹出式菜单
        与普通菜单的区别：
            JPopupMenu而不是JMenu
            不需要加到JMenuBar中，而是通过jPopupMenu.show(component,x,y)方法在component的(x,y)位置弹出。（component的坐标系统）
        例如，要加到一个JTextArea中：
            jTextArea.addMouseListener(new MouseAdapter(){
                public void mouseReleased(MouseEvent e){    //有些操作系统是按下的时候出来，所以可能还得写个mousePressed的
                    if(e.isPopupTriggered)
                        jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
                }
            });
工具栏JToolBar
    把菜单中常用的命令放在工具栏上
    JToolBar其实就是一个普通的容器，默认用BoxLayout管理，通常放在BorderLayout的北区、东区或西区。
    一般把按钮放在工具栏中，然后把图标设置在按钮上。
    JToolBar常用属性：
        orientation：JToolBar.HORIZONTAL或者JToolBar.VERTICAL
        floatable：boolean，默认是可浮动的，即可以拖到任何地方（不能设置边框，否则不能浮动）
使用Action接口处理动作事件
    Action接口是ActionListener的子接口，可以集中处理通用行为，把他们从其他代码中分离开来。
    AbstractAction是一个抽象类，实现了Action接口。
        Action exitAction = new AbstractAction("Exit"){ //匿名类
            public void actionPerformed(ActionEvent e){
                System.exit(0);
            }
        };
    某些容器，往里添加Action对象的时候，会自动产生一个合适的组件，并且为它添加一个ActionListener：
        jMenu.add(exitAction);  
        jToolBar(exitAction);
    某些组件，如JButton,JRadioButton,JCheckBox等，可以直接用Action对象创建实例：
        JButton jbt = new JButton(exitAction);
    与热键相连：
        exitAction.putValue(Action.MNEMONIC_KEY, new Integer(KeyEvent.VK_E));   //都是通过putValue的
    快捷键：
        KeyStroke exitKey = KeyStroke.getKeyStroke(KeyEvent.VK_E, KeyEvent.CTRL_MASK);
        exitAction.putValue(Action.ACCELERATOR_KEY, exitKey);
JOptionPane 标准对话框
    使用JOptionPane的静态方法showXxxxDialog()来创建对话框。
    Message dialog
        只有一个ok按钮。
        可以设置messageType，不同的messageType那个图标不一样。也可以自己提供图标。
            JOptionPane.ERROR_MESSAGE
            JOptionPane.INFORMATION_MESSAGE
            JOptionPane.PLAIN_MESSAGE   没有图标
            JOptionPane.WARNING_MESSAGE
            JOptionPane.QUESTION_MESSAGE
        message是一个Object，一般为字符串，但是也可以是GUI组件，会显示！
    Confirmation dialog
        optionType决定对话框的按钮：
            JOptionPane.YES_NO_OPTION
            JOptionPane.YES_NO_CANCEL_OPTION
            JOptionPane.OK_CANCEL_OPTION
        会返回一个int值：
            JOption.YES_OPTION
            JOption.NO_OPTION
            JOption.CANCEL_OPTION
            JOption.OK_OPTION
            JOption.CLOSED_OPTION
    Input dialog
        从文本域中输入，或从组合框、列表框中选择
        若创建时没给定数组selectionValues，则显示文本域，若备选项小于20个则是组合框，否则为列表框。（指定initialSelectionValue）
        若为文本域，则返回一个String，否则返回一个对应的Object
            把返回值转化成double：((Double)returnValue).doubleValue()
    Option dialog
        通过Object[] options指定按钮（给String[]就行），返回值为int，估计是选中的按钮的编号。
自定义对话框
    扩展JDialog类（JOptionPane是JComponent的子类，轻型容器，而JDialog是重型的。）
    直接往JDialog对象的contentPane中加东西，并安装相应按钮动作的监听器就好了。
    标准对话框是modal的，意思是在关闭之前不能访问其他窗口。自定义窗口默认不是modal的，可以把modal设成true。显示只要visible设成true就好了。
    关掉是用dispose()
JColorChooser
    轻型的，可以添加到任何容器中：
        frame.add(new JColorChooser()); 就可以了！
    要显示在对话框中：
        JColorChooser.showDialog()
        返回null或者Color对象。
JFileChooser
    也是轻型的，需要的话也可以添加到任何容器中。
    对话框中显示：
        JFileChooser jFileChooser1 = new JFileChooser(new File("."));   //当前目录
        if(jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)   //点了确定。保存的是showSaveDialog
            File fileOpened = jFileChooser1.getSelectedFile();          //是这样获得的
